---
########################################################################
# 1. Linux (semaforos): facts + PUERTOS → JSON → fetch al nodo control #
########################################################################
- name: Recoger facts y escanear puertos
  hosts: semaforos
  gather_facts: yes
  become: true

  vars:
    ruta_json_remoto: "/tmp/info_{{ inventory_hostname }}.json"
    ruta_json_ctl:    "/home/semaphore/Excels"

  pre_tasks:
    - name: Crear carpeta local para los JSON
      file:
        path: "{{ ruta_json_ctl }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      run_once: true
      become: false

  tasks:
    # 1A) Escaneo rápido de PUERTOS de bases de datos (método wait_for)
    - name: Verificar MySQL (3306)
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 3306
        timeout: 4
      register: mysql_port
      ignore_errors: yes

    - name: Verificar PostgreSQL (5432)
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 5432
        timeout: 4
      register: postgres_port
      ignore_errors: yes

    - name: Verificar SQL Server (1433)
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 1433
        timeout: 4
      register: sqlserver_port
      ignore_errors: yes

    - name: Verificar Oracle (1521)
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 1521
        timeout: 4
      register: oracle_port
      ignore_errors: yes

    - name: Verificar MongoDB (27017)
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 27017
        timeout: 4
      register: mongodb_port
      ignore_errors: yes

    - name: Consolidar resultado de puertos DB
      set_fact:
        puertos_db:
          mysql:      "{{ mysql_port    is defined and mysql_port.elapsed     < 3 }}"
          postgresql: "{{ postgres_port is defined and postgres_port.elapsed  < 3 }}"
          sqlserver:  "{{ sqlserver_port is defined and sqlserver_port.elapsed < 3 }}"
          oracle:     "{{ oracle_port   is defined and oracle_port.elapsed    < 3 }}"
          mongodb:    "{{ mongodb_port  is defined and mongodb_port.elapsed   < 3 }}"

    # 1B) Listar TODOS los puertos TCP/UDP en escucha con ss/netstat
    - name: Obtener puertos TCP/UDP en escucha (ss)
      shell: |
        ss -lntuH | awk '{print $5}' | awk -F':' '{print $NF}' | sort -n | uniq
      register: listening_ports_cmd
      changed_when: false
      failed_when: false

    - name: (Fallback) Obtener puertos de netstat si ss no está disponible
      shell: |
        netstat -lntu 2>/dev/null | awk 'NR>2 {print $4}' | awk -F':' '{print $NF}' | sort -n | uniq
      register: listening_ports_netstat
      changed_when: false
      when: listening_ports_cmd.rc != 0

    - name: Definir lista final de puertos en escucha
      set_fact:
        listening_ports: >-
          {{
            (listening_ports_cmd.rc == 0
             and listening_ports_cmd.stdout_lines
             or listening_ports_netstat.stdout_lines)
          }}

    - name: Mostrar puertos en escucha
      debug:
        msg: "Puertos en escucha en {{ inventory_hostname }}: {{ listening_ports }}"

    - name: Obtener usuarios y grupos
      shell: |
        echo "Usuarios del sistema:" && getent passwd | awk -F: '{ print $1 " (UID: " $3 ", GID: " $4 ", Shell: " $7 ")" }'
        echo "" && echo "Grupos del sistema:" && getent group
      register: salida_usuarios
      args:
        executable: /bin/bash

    - name: Mostrar usuarios y grupos
      debug:
        msg: "{{ salida_usuarios.stdout_lines }}"

    # 1C) Guardar facts + puertos → JSON y traerlo al control
    - name: Guardar facts + puertos en JSON en el host
      copy:
        content: "{{ ansible_facts
                     | combine(puertos_db)
                     | combine({'listening_ports': listening_ports})
                     | combine({'usuarios': salida_usuarios.stdout_lines})
                     | combine({'inventory_hostname': inventory_hostname})
                     | to_nice_json }}"
        dest: "{{ ruta_json_remoto }}"
        force: yes

    - name: Traer JSON al nodo de control
      fetch:
        src: "{{ ruta_json_remoto }}"
        dest: "{{ ruta_json_ctl }}/"
        flat: true

########################################################################
# 2. localhost: genera/actualiza Inventario_Equipos_DMZ.xlsx #
########################################################################
- name: Añadir línea al Excel existente a partir de los JSON
  hosts: localhost
  gather_facts: no
  vars:
    ruta_json_ctl: "/home/semaphore/Excels"
    script_python: "/home/semaphore/Excels/append_excel.py"
    ruta_excel:    "/home/semaphore/Excels/Inventario_Equipos_DMZ.xlsx"

  tasks:
    - name: Copiar / actualizar script Python para añadir línea
      copy:
        src: "./append_excel.py"
        dest: "{{ script_python }}"
        mode: "0755"
        force: true

    - name: Buscar todos los JSON de inventario
      find:
        paths: "{{ ruta_json_ctl }}"
        patterns: "info_*.json"
        file_type: file
      register: json_files

    - name: Ejecutar script para añadir línea al Excel
      command: >
        python3 {{ script_python }} {{ ruta_excel }} {{ item }}
      loop: "{{ json_files.files | map(attribute='path') | list }}"
      register: excel_append

    - debug:
        var: excel_append.results

################################################################
# 3. Windows: copiar al share \\srvctdep02\Deploy\Ansible ######
################################################################
- name: Copiar inventario a Ruta de red (ya montada en el sistema)
  hosts: localhost
  gather_facts: no

  vars:
    src_dir:    "/home/semaphore/Excels"
    excel_file: "Inventario_Equipos_DMZ.xlsx"
    txt_file:   "Inventario_Equipos_DMZ.txt"
    usuarios_txt_file: "usuarios_equipos.txt"
    mountpoint: "/mnt/ansible_share"

  tasks:
    - name: Verificar que el recurso ya está montado
      stat:
        path: "{{ mountpoint }}"
      register: mount_status

    - name: Fallar si no está montado
      fail:
        msg: "❌ El recurso {{ mountpoint }} no está montado. Monta primero la carpeta en el sistema."
      when: not mount_status.stat.exists

    - name: Copiar archivos al recurso compartido ya montado
      become: true
      copy:
        src: "{{ src_dir }}/{{ item }}"
        dest: "{{ mountpoint }}/{{ item }}"
        mode: "0644"
      loop:
        - "{{ excel_file }}"
        - "{{ txt_file }}"
        - "{{ usuarios_txt_file }}"

    - name: ✅ Mensaje final de éxito
      debug:
        msg: "✅ Archivos copiados correctamente a {{ mountpoint }}"



